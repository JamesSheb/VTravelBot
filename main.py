import os
import string
from typing import Dict, List, Any

import telebot
from telebot import types
from loguru import logger

from config_bot import BOT_TOKEN
from vtravel_bot_parsers import ParseHotels
from vtravel_bot_parsers import TextTranslator


logger.add(
    'logs/bot.log',
    format="{time:YYYY-MM-DD at HH:mm:ss} {file} (line -{line})  {level}  {message} <- {function}",
    level='DEBUG',
    rotation='1 week',
    retention=4,
    compression='zip'
)

bot = None
try:
    bot = telebot.TeleBot(token=BOT_TOKEN)
except Exception as bot_error:
    logger.exception(bot_error)


@bot.message_handler(commands=['start'])
@logger.catch
def start_bot(message: types.Message) -> None:
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ —Å—Ç–∏–∫–µ—Ä–æ–º."""
    try:
        path_to_sticker = os.path.abspath(
            os.path.join('', 'static/stickers/HelloAnimatedSticker.tgs'))
        sticker = open(path_to_sticker, mode='rb')
    except FileNotFoundError:
        sticker = 'üëã'
    hello_messages = '–ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç —Ç—É—Ä–∞–≥–µ–Ω—Å—Ç–≤–∞.\n' \
                     '–ü–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–∞–º—ã–µ –ª—É—á—à–∏–µ –æ—Ç–µ–ª–∏ –¥–ª—è –≤–∞—Å!\n\n'

    try:
        bot.send_sticker(message.chat.id, sticker)
    except Exception as error_message:
        logger.exception('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞ "hello" - {0}'.format(
                                                                error_message))
        bot.send_message(message.chat.id, sticker)

    bot.send_message(message.chat.id, hello_messages)

    markup = create_command_buttons()
    buttons_message = '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –±–æ–ª–µ–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä'
    bot.send_message(message.chat.id, buttons_message, reply_markup=markup)


@logger.catch
def create_command_buttons() -> 'types.InlineKeyboardMarkup':
    """
    –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥:
        [lowprice, highprice, bestdeal, history, help]
    """
    markup = types.InlineKeyboardMarkup(row_width=1)

    lowprice_button = types.InlineKeyboardButton(
                                            '–¢–æ–ø –¥–µ—à—ë–≤—ã—Ö –æ—Ç–µ–ª–µ–π',
                                            callback_data='lowprice_button')
    high_button = types.InlineKeyboardButton('–¢–æ–ø –¥–æ—Ä–æ–≥–∏—Ö –æ—Ç–µ–ª–µ–π',
                                             callback_data='high_button')
    bestdeal_button = types.InlineKeyboardButton(
                                            '–¢–æ–ø –æ—Ç–µ–ª–µ–π, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ —Ü–µ–Ω–µ',
                                            callback_data='bestdeal_button')
    # history_button = types.InlineKeyboardButton(
    #                                     '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π',
    #                                     callback_data='history_button')
    help_button = types.InlineKeyboardButton(
                                            '–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º',
                                            callback_data='help_button')

    markup.add(lowprice_button, high_button, bestdeal_button, help_button)
    return markup


@bot.callback_query_handler(func=lambda call: call.data == 'help_button')
@logger.catch()
def callback_send_description_of_all_commands(
                                            call: types.CallbackQuery) -> None:
    """
    –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ help_button.
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥.
    """
    command_description = command_all_description()
    bot.send_message(call.message.chat.id, command_description)


@bot.message_handler(commands=['help'])
def reply_to_help_command(message: types.Message) -> None:
    """
    –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–æ–º–∞–Ω–¥—ã - /help.
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥.
    """
    command_description = command_all_description()
    bot.send_message(message.chat.id, command_description)


def command_all_description() -> str:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥:
        [lowprice, highprice, bestdeal, history]
    """
    command_description = (
        "/lowprice - –£–∑–Ω–∞—Ç—å —Ç–æ–ø —Å–∞–º—ã—Ö –¥–µ—à—ë–≤—ã—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ\n"
        "/highprice - –£–∑–Ω–∞—Ç—å —Ç–æ–ø —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ\n"
        "/bestdeal - –£–∑–Ω–∞—Ç—å —Ç–æ–ø –æ—Ç–µ–ª–µ–π, –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ —Ü–µ–Ω–µ"
        " –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é –æ—Ç —Ü–µ–Ω—Ç—Ä–∞\n"
        "/history - –£–∑–Ω–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π\n"
    )
    return command_description


@bot.callback_query_handler(
    func=lambda call: call.data in (
                        'lowprice_button', 'high_button', 'bestdeal_button'))
def callback_user_selection_button(call: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫: [lowprice, highprice, bestdeal]."""
    buttons_and_modes = {
        'lowprice_button': 'PRICE',
        'high_button': 'PRICE_HIGHEST_FIRST',
        'bestdeal_button': 'DISTANCE_FROM_LANDMARK'
    }
    mode_for_sorting = buttons_and_modes.get(call.data)
    logger.debug('–í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∫–Ω–æ–ø–∫–∞ {0}'.format(call.data))
    city_selection = bot.send_message(call.message.chat.id,
                                      '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞:')

    if mode_for_sorting == 'DISTANCE_FROM_LANDMARK':
        bot.register_next_step_handler(city_selection,
                                       get_lowest_hotel_price,
                                       mode_for_sorting)
    else:
        bot.register_next_step_handler(city_selection,
                                       city_search,
                                       mode_for_sorting)


@bot.message_handler(commands=['lowprice', 'highprice', 'bestdeal'])
@logger.catch
def command_user_choice_command(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã: [lowprice, highprice, bestdeal]"""
    commands_and_modes = {
        '/lowprice': 'PRICE',
        '/highprice': 'PRICE_HIGHEST_FIRST',
        '/bestdeal': 'DISTANCE_FROM_LANDMARK'
    }
    mode_for_sorting = commands_and_modes.get(message.text)
    logger.debug('–í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∫–æ–º–∞–Ω–¥–∞ {0}'.format(message.text))
    city_selection = bot.send_message(message.chat.id,
                                      '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞:')

    if mode_for_sorting == 'DISTANCE_FROM_LANDMARK':
        bot.register_next_step_handler(city_selection,
                                       get_lowest_hotel_price,
                                       mode_for_sorting)
    else:
        bot.register_next_step_handler(city_selection,
                                       city_search,
                                       mode_for_sorting)


@logger.catch
def get_lowest_hotel_price(message: types.Message,
                           mode_for_sorting: str) -> None:
    """
    –ü–æ–ª—É—á–∏—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –æ—Ç–µ–ª—å.

    Args:
        message (types.Message): –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞.
        mode_for_sorting (str): –†–µ–∂–∏–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π.
    """
    search_city = message
    minimum_price = bot.send_message(message.chat.id,
                                     '–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –æ—Ç–µ–ª—è:')
    bot.register_next_step_handler(minimum_price,
                                   get_highest_hotel_price,
                                   search_city,
                                   mode_for_sorting)


@logger.catch
def get_highest_hotel_price(message: types.Message,
                            search_city: types.Message,
                            mode_for_sorting: str) -> None:
    """
    –ü–æ–ª—É—á–∏—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –æ—Ç–µ–ª—å.

    Args:
        message (types.Message): –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞.
        search_city (types.Message): –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞.
        mode_for_sorting (str): –†–µ–∂–∏–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π.
    """
    minimum_price = None
    logger.info(
        '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –æ—Ç–µ–ª—å, –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {0}'.format(
                                                                message.text))
    try:
        minimum_price = int(message.text)
    except Exception as error_message:
        logger.warning(
            '–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {0}'
            '–í–≤–µ–¥–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {1}'.format(
                                                error_message, message.text)
        )
        price = bot.send_message(message.chat.id,
                                 '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É - —Ü–∏—Ñ—Ä–∞–º–∏:')
        bot.register_next_step_handler(price,
                                       get_highest_hotel_price,
                                       search_city,
                                       mode_for_sorting)

    if minimum_price:
        maximum_price = bot.send_message(
                                    message.chat.id,
                                    '–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –æ—Ç–µ–ª—è:')
        bot.register_next_step_handler(maximum_price,
                                       get_complete_information_on_bestdeal,
                                       search_city,
                                       mode_for_sorting,
                                       minimum_price)


@logger.catch
def get_complete_information_on_bestdeal(message: types.Message,
                                         search_city: types.Message,
                                         mode_for_sorting: str,
                                         minimum_price: int) -> None:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–æ–∏—Å–∫—É –æ—Ç–µ–ª–µ–π –≤ —Ä–µ–∂–∏–º–µ bestdeal.

    Args:
        message (types.Message): –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞.
        search_city (types.Message): –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞.
        mode_for_sorting (str): –†–µ–∂–∏–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π.
        minimum_price (int): –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π.
    """
    maximum_price = None
    logger.info(
        '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –æ—Ç–µ–ª—å, –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {0}'.format(
                                                                message.text))
    try:
        maximum_price = int(message.text)
    except Exception as error_message:
        logger.warning(
            '–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {0}'
            '–í–≤–µ–¥–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {1}'.format(
                                                error_message, message.text)
        )
        price = bot.send_message(message.chat.id,
                                 '–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É - —Ü–∏—Ñ—Ä–∞–º–∏:')
        bot.register_next_step_handler(price,
                                       get_complete_information_on_bestdeal,
                                       search_city,
                                       mode_for_sorting,
                                       minimum_price)

    if maximum_price:
        bestdeal = [minimum_price, maximum_price]
        city_search(search_city,
                    mode_for_sorting,
                    bestdeal)


@logger.catch
def translation_of_text_from_russian_into_english(city_name: str) -> str:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –±—É–∫–≤–∞–º–∏ (ru) - –º–µ–Ω—è–µ–º –Ω–∞ (en).
    –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ –ø–µ—Ä–µ–≤–æ–¥–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ (en).

    Args:
        city_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.
    """
    if any(map(
            lambda letter: letter not in string.ascii_letters, city_name)):
        translator = TextTranslator()
        logger.info(
            '–ì–æ—Ä–æ–¥ –≤–≤–µ–¥–µ–Ω –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π: {0},'
            ' –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥ —Å (ru) -> (en)'.format(city_name))
        try:
            city_name = translator.translate(text=city_name)
        except (ConnectionError, ValueError) as error_message:
            logger.error(error_message)

    logger.info(
        '–í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –ø–æ–∏—Å–∫–∞: {0}'.format(city_name))
    return city_name


@logger.catch
def city_search(message: types.Message, mode_for_sorting: str,
                bestdeal_mode: List[int] = None) -> None:
    """
    –ü–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ù–∞–π—Ç–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞.

    Args:
        message: types.Message
        mode_for_sorting (str): –†–µ–∂–∏–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π.
        bestdeal_mode (List[int]) = None: –ï—Å–ª–∏ –∑–∞–¥–∞–Ω –¥–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            –≤ —Å–ø–∏—Å–∫–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è [–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ—Ç–µ–ª—è,
                                –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ—Ç–µ–ª—è]
    """
    temporary_message = bot.send_message(message.chat.id,
                                         '–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏...')

    selected_city_to_search = translation_of_text_from_russian_into_english(
        city_name=message.text
    )
    search_results = None
    try:
        parser = ParseHotels()
        search_results = parser.get_search_results_by_city(
                                        city_to_search=selected_city_to_search)
    except ConnectionError as error_message:
        logger.error(error_message)
        bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=temporary_message.id,
                        text='–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –µ—â–µ —Ä–∞–∑')
    except ValueError as error_message:
        logger.error(error_message)
        city = bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=temporary_message.id,
                        text='–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –±—É–∫–≤–∞–º–∏')
        bot.register_next_step_handler(city, city_search, mode_for_sorting)

    if search_results:
        try:
            destinations = search_results.get('suggestions')[0].get('entities')
            found_destinations = {
                destination.get('caption'): destination.get('destinationId')
                for destination in destinations
                }

            if not bestdeal_mode:
                markup = create_buttons_to_select_destination(
                                                        found_destinations,
                                                        mode_for_sorting)
            else:
                markup = create_buttons_to_select_destination(
                                                        found_destinations,
                                                        mode_for_sorting,
                                                        bestdeal_mode
                )

            bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=temporary_message.id,
                        text='–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π',
                        reply_markup=markup)
        except Exception as error_message:
            logger.exception(error_message)
            bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=temporary_message.id,
                        text='–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –µ—â–µ —Ä–∞–∑')


@logger.catch
def create_buttons_to_select_destination(
            destinations: Dict[str, str],
            mode_for_sorting: str,
            bestdeal_mode: List[int] = None) -> 'types.InlineKeyboardMarkup':
    """
    –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π.

    callback_data - —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3-—Ö —á–∞—Å—Ç–µ–π, –µ—Å–ª–∏ bestdeal_mode = None:
        - —Å–ª–æ–≤–æ: destinationId
        - id: id –º–µ—Å—Ç–æ—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
        - —Ä–µ–∂–∏–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –æ—Ç–µ–ª–µ–π

    callback_data - —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 5-—Ç–∏ —á–∞—Å—Ç–µ–π, –µ—Å–ª–∏ bestdeal_mode:
        –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ –ø–µ—Ä–≤—ã–º 3 —á–∞—Å—Ç—è–º:
            - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ—Ç–µ–ª—è
            - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ—Ç–µ–ª—è

    Args:
       destinations (Dict[str, str]): –ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
       mode_for_sorting (str): –†–µ–∂–∏–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π.
       bestdeal_mode (List[int]) = None: –ï—Å–ª–∏ –∑–∞–¥–∞–Ω –¥–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            –≤ —Å–ø–∏—Å–∫–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è [–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ—Ç–µ–ª—è,
                                –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ—Ç–µ–ª—è]
    """
    markup = types.InlineKeyboardMarkup()

    for destination_name, destination_id in destinations.items():
        callback_data = f'destinationId-{destination_id}-{mode_for_sorting}'
        if bestdeal_mode:
            callback_data = f'destinationId-{destination_id}-' \
                            f'{mode_for_sorting}-{bestdeal_mode[0]}-' \
                            f'{bestdeal_mode[1]}'
        button = types.InlineKeyboardButton(
            destination_name,
            callback_data=callback_data
        )
        markup.add(button)

    return markup


@bot.callback_query_handler(
    func=lambda call: call.data.split('-')[0] == 'destinationId')
@logger.catch
def hotel_search(call: types.CallbackQuery):
    """
    –ü–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π.

    –í callback - –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π:
        –í–∏–¥ —Å—Ç—Ä–æ–∫–∏:
            'destinationId-{destination_id}-{mode_for_sorting}'
        –∏–ª–∏
            'destinationId-{destination_id}-{mode_for_sorting}-{min price}-{max price}'

    Args:
        call (types.CallbackQuery):
            –°–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
                —Å—Ç—Ä–æ–∫–∞ destinationId - id –¥–ª—è –ø–æ–∏—Å–∫–∞ - —Ä–µ–∂–∏–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –æ—Ç–µ–ª–µ–π
                - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
    """
    temporary_message = bot.send_message(
        call.message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏...')

    information_about_hotel_search = call.data.split('-')
    destination_search_id = information_about_hotel_search[1]
    hotel_search_mode = information_about_hotel_search[2]

    search_results = None
    try:
        parser = ParseHotels()
        if len(information_about_hotel_search) == 3:
            search_results = parser.get_list_of_hotels_with_parameters(
                destination_id=destination_search_id,
                sort_mode=hotel_search_mode
            )
        else:
            distance_label = 'City center'
            search_results = parser.get_list_of_hotels_with_parameters(
                destination_id=destination_search_id,
                sort_mode=hotel_search_mode,
                price_min=information_about_hotel_search[3],
                price_max=information_about_hotel_search[4],
                distance_label=distance_label
            )
    except ConnectionError as error_message:
        logger.error(error_message)
        bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=temporary_message.id,
                    text='–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º '
                         '–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –µ—â–µ —Ä–∞–∑')
    except ValueError as error_message:
        logger.error(error_message)
        bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=temporary_message.id,
                    text='–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –µ—â–µ —Ä–∞–∑')

    if search_results:
        hotels = None
        try:
            hotels = search_results.get('data').get('body').get(
                'searchResults').get('results')
        except Exception as error_message:
            logger.exception(error_message)
            bot.send_message(call.message.chat.id,
                             '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –µ—â–µ —Ä–∞–∑')

        if hotels:
            number_of_hotels = bot.edit_message_text(
                message_id=temporary_message.id,
                chat_id=call.message.chat.id,
                text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n'
                '–û—Ç 1 –¥–æ 20 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)')
            bot.register_next_step_handler(number_of_hotels,
                                           get_number_of_hotels_from_user,
                                           hotels)


@logger.catch
def get_number_of_hotels_from_user(message: types.Message,
                                   hotels: List[Dict[str, Any]]) -> None:
    """
    –ü–æ–ª—É—á–∏—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π.

    Args:
        message: types.Message
        hotels (List[Dict[str, Any]]): –°–ø–∏—Å–æ–∫ –æ—Ç–µ–ª–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∏—Ö.
    """
    number_of_hotels = None
    logger.info('–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è = {0}'.format(
                                                                message.text))
    try:
        number_of_hotels = int(message.text)
    except ValueError as error_message:
        logger.exception('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {0}'.format(
                                                                error_message))
        chat_message = bot.send_message(
                                message.chat.id,
                                '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ü–∏—Ñ—Ä–∞–º–∏.')
        bot.register_next_step_handler(chat_message,
                                       get_number_of_hotels_from_user)

    if number_of_hotels:
        if number_of_hotels < 1:
            logger.warning(
                '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö'
                ' —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ {0} < 1'.format(number_of_hotels)
            )
            chat_message = bot.send_message(
                                message.chat.id,
                                '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç 1 –¥–æ 20 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)')
            bot.register_next_step_handler(chat_message,
                                           get_number_of_hotels_from_user)
        else:
            photo = bot.send_message(
                message.chat.id,
                '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–µ–ª—è (–¥–∞/–Ω–µ—Ç) ?')
            bot.register_next_step_handler(photo,
                                           photo_upload,
                                           number_of_hotels,
                                           hotels)


@logger.catch
def photo_upload(message: types.Message, number_of_hotels: int,
                 hotels: List[Dict[str, Any]]) -> None:
    """
    –ü–æ–ª—É—á–∏—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–≤–µ—Ç - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–æ—Ç–æ –æ—Ç–µ–ª—è.
        –ï—Å–ª–∏ –¥–∞ - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.

    Args:
        message: types.Message
        number_of_hotels (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–¥–±–æ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
        hotels (List[Dict[str, Any]]): –°–ø–∏—Å–æ–∫ –æ—Ç–µ–ª–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∏—Ö.
    """
    photo = True if message.text.lower() == '–¥–∞' else False

    if photo:
        number_photos = bot.send_message(
            message.chat.id,
            '–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç 1 –¥–æ 5 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)')
        bot.register_next_step_handler(
            number_photos,
            get_selection_of_hotels,
            number_of_hotels,
            hotels
        )
    else:
        logger.info('–í—ã–±—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–µ–ª–µ–π –±–µ–∑ —Ñ–æ—Ç–æ')
        get_selection_of_hotels(message,
                                number_of_hotels=number_of_hotels,
                                hotels=hotels)


@logger.catch
def get_selection_of_hotels(message: types.Message, number_of_hotels: int,
                            hotels: List[Dict[str, Any]]) -> None:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É –ø–æ–¥–±–æ—Ä–∫—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—Ç–µ–ª–µ–π.

    Args:
        message: types.Message
        number_of_hotels (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–¥–±–æ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
        hotels (List[Dict[str, Any]]): –°–ø–∏—Å–æ–∫ –æ—Ç–µ–ª–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∏—Ö.
    """
    try:
        number_of_photos = int(message.text)
    except Exception as error_message:
        logger.error(error_message)
        logger.warning(
            '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π '
            '–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è = {0}'.format(message.text)
        )
        number_of_photos = 5
    logger.info(
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ = {0}'.format(
                                                        number_of_photos))

    logger.info('–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É –æ—Ç–µ–ª–µ–π (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = {0})'.format(
                                                            number_of_hotels))
    parser = ParseHotels()
    selection_of_hotels = None
    try:
        selection_of_hotels = parser.collect_brief_information_about_hotels(
                                            number_of_hotels=number_of_hotels,
                                            hotels=hotels)
    except Exception as error_message:
        logger.exception(error_message)
        bot.send_message(message.chat.id,
                         '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –µ—â–µ —Ä–∞–∑')

    if number_of_photos and selection_of_hotels:
        if number_of_photos not in range(1, 5):
            number_of_photos = 5
        send_information_about_found_hotels(
                                        message,
                                        selected_hotels=selection_of_hotels,
                                        number_of_photos=number_of_photos)
    else:
        send_information_about_found_hotels(
                                        message,
                                        selected_hotels=selection_of_hotels)


@logger.catch
def send_information_about_found_hotels(message: types.Message,
                                        selected_hotels: List[Dict[str, str]],
                                        number_of_photos: int = None) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—Ç–µ–ª—è—Ö.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π - –≤—ã–≤–µ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ
        –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç–µ–ª—è.

    Args:
        message: types.Message
        selected_hotels (List[Dict[str, str]]): –ü–æ–¥–±–æ—Ä–∫–∞ –æ—Ç–µ–ª–µ–π.
        number_of_photos (int) = None: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
    """
    logger.info('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—Ç–µ–ª—è—Ö')
    parser = ParseHotels()
    bot.send_message(message.chat.id, '–ü–æ–¥–±–æ—Ä–∫–∞ –æ—Ç–µ–ª–µ–π:')
    for hotel in selected_hotels:
        short_description = (
            'üè®\n'
            '–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è: {name}\n'
            '–ê–¥—Ä–µ—Å –æ—Ç–µ–ª—è: {address}\n'
            '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞: {landmarks}\n'
            '–¶–µ–Ω–∞: {price}'.format(
                name=hotel.get('name'),
                address=hotel.get('address'),
                landmarks=hotel.get('landmarks'),
                price=hotel.get('price')
            )
        )
        bot.send_message(message.chat.id, short_description)

        if number_of_photos:
            temporary_message = bot.send_message(message.chat.id,
                                                 '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ...')
            try:
                hotel_photos = parser.get_hotel_photo(
                                        hotel_id=hotel.get('id'),
                                        number_of_photos=number_of_photos)
                for number, photo in enumerate(hotel_photos, 1):
                    logger.info('–ó–∞–≥—Ä—É–∑–∫–∞ {0} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –û—Ç–µ–ª—å - {1}'.format(
                        number,
                        hotel.get('name')
                    ))
                    image_url = photo.get('baseUrl').format(size='y')
                    bot.send_photo(message.chat.id, image_url)
                bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=temporary_message.id,
                        text='–§–æ—Ç–æ –æ—Ç–µ–ª—è:')
            except (ConnectionError, ValueError) as error_message:
                logger.warning(error_message)
                bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=temporary_message.id,
                    text='–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –æ—Ç–µ–ª—è'
                )


@bot.message_handler(content_types=['text'])
@logger.catch
def process_all_messages_from_user(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ "/" –∏–ª–∏ "/help".
    """
    if message.text:
        logger.info('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
        bot.send_message(
                        chat_id=message.chat.id,
                        text='–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª - "/" –∏–ª–∏ "/help" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ '
                             '–≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.')


if __name__ == '__main__':
    try:
        logger.debug('Start bot')
        bot.polling(none_stop=True, interval=0)
    except Exception as error:
        logger.exception(error)
